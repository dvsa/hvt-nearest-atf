{% from "includes/analytics/macro.njk" import headscript as gaHeadScript %}
<!--[if !IE 8]><!-->
       <link href="{{getAsset('all.css')}}" rel="stylesheet">
  <!--<![endif]-->

  {# For Internet Explorer 8, you need to compile specific stylesheet #}
  {# see https://frontend.design-system.service.gov.uk/supporting-ie8/#support-internet-explorer-8 #}
  <!--[if IE 8]>
    <link href="{{getAsset('all-ie8.css')}}" rel="stylesheet">
  <![endif]-->

  {# For older browsers to allow them to recognise HTML5 elements such as `<header>` #}
  <!--[if lt IE 9]>
    <script src="{{getAsset('html5shiv.js')}}"></script>
  <![endif]-->

    <!-- TODO remove these once BL-11758 is complete -->
    <!-- Include the styles here as assets aren't available yet - see this ticket BL-11758 -->
    <style>
        .hidden {
            display: none;
        }
        .js-show {
            display: none;
        }
        .js-enabled .js-show {
            display: inherit;
        }
        .capitalize:first-letter {
            text-transform: capitalize;
        }
    </style>

  <link rel="icon" href="{{getAsset('images/favicon.ico')}}" type="image/x-icon"/>
  <script>
        !function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define("cookieManager",["exports"],n):n(e.cookieManager={})}(this,function(e){"use strict";"undefined"==typeof console&&(console={log:function(){},info:function(){},debug:function(){},warn:function(){},error:function(){}});const n={"delete-undefined-cookies":!0,"user-preference-cookie-name":"cm-user-preferences","user-preference-cookie-secure":!1,"user-preference-cookie-expiry-days":365,"user-preference-configuration-form-id":!1,"user-preference-saved-callback":!1,"cookie-banner-id":!1,"cookie-banner-visibility-class":"hidden","cookie-banner-visible-on-page-with-preference-form":!0,"cookie-manifest":[]};let o={};const i=function(){const e=o["user-preference-cookie-name"],n=t(e);n||console.info("User preference cookie is not set or valid. This cookie defines user preferences. Assuming non-consent, and deleting all non-essential cookies if config allows.");const i=decodeURIComponent(document.cookie).split(";");if(1!==i.length||!i[0].match(/^ *$/)){for(var c=0;c<i.length;c++){const t=i[c].split(/=(.*)/)[0].trim();if(t===e)continue;const a=r(t);!1!==a?!1!==a.optional?n&&!1!==n.hasOwnProperty(a["category-name"])?"off"!==n[a["category-name"]]&&"false"!==n[a["category-name"]]?console.info(`Cookie "${t}" is listed under category "${a["category-name"]}"; user preferences opts in-to this category; cleared for use.`):(console.info(`Cookie "${t}" is listed under category "${a["category-name"]}"; user preferences opts out of this category; deleting.`),s(t)):(console.info(`Cookie "${t}" is listed  Cannot find category "${a.category_name}" in user preference cookie "${e}"; assuming non-consent; deleting.`),s(t)):console.debug(`Cookie "${t}" is marked as non-optional; skipping.`):o["delete-undefined-cookies"]?(console.info(`Cookie "${t}" is not in the manifest and "delete-undefined-cookies" is enabled; deleting.`),s(t)):console.info(`Cookie "${t}" is not in the manifest and "delete-undefined-cookies" is disabled; skipping.`)}console.debug("Finishing processing all cookies.")}},t=function(){const e=c(o["user-preference-cookie-name"]);if(!e)return!1;try{return JSON.parse(e)}catch(e){return console.error(`Unable to parse user preference cookie "${cm_cookie}" as JSON.`,e),!1}},r=function(e){const n=o["cookie-manifest"];for(var i=0;i<n.length;i++){const o=n[i].cookies;for(var t=0;t<o.length;t++){const r=o[t];if(e.startsWith(r))return console.debug(`Cookie "${e}" found in manifest.`),n[i]}}return console.debug(`Cookie "${e}" NOT found in manifest.`),!1},c=function(e){const n=e+"=",o=decodeURIComponent(document.cookie).split(";");for(var i=0;i<o.length;i++){let e=o[i];for(;" "===e.charAt(0);)e=e.substring(1);if(0===e.indexOf(n))return e.substring(n.length,e.length)}return!1},s=function(e){if(a(e),T("domains")){let i="."+window.location.hostname;for(var n=0;n<o.domains.length;n++)i.indexOf(o.domains[n])>=0&&d(e,o.domains[n])}else u(e);console.debug(`Deleted cookie "${e}"`)},a=function(e){document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/;"},u=function(e){let n=window.location.hostname,o="."+n;document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+n+";path=/;",document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+o+";path=/;";let i=n.indexOf("."),t=n.substring(i),r="."+t;document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+t+";path=/;",document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+r+";path=/;"},d=function(e,n){let o="."+n;document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+n+";path=/;",document.cookie=e+"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+o+";path=/;",console.debug("delete "+e+" in "+n+" and "+o)},f=function(){if(!C("user-preference-configuration-form-id"))return void console.debug("Skipping binding to user cookie preference form.");if("loading"===document.readyState)return document.addEventListener("DOMContentLoaded",function(){f()}),void console.debug("DOM is not ready; adding event to bind to form when ready.");const e=l();null!==e&&(e.addEventListener("submit",function(e){g(e),i(),h()}),console.debug(`Found and bound to cookie preference form with ID "${o["user-preference-configuration-form-id"]}".`),p())},l=function(){return document.getElementById(o["user-preference-configuration-form-id"])},p=function(){if(v("set-checkboxes-in-preference-form"))return void console.log("Skipping set preferences in form");const e=l();if(null===e)return;const n=t();for(const o in n){let i=e.querySelectorAll('input[name="'+o+'"]');for(let e=0;e<i.length;e++)n.hasOwnProperty(o)&&(i[e].checked=i[e].value===n[o])}},g=function(e){e.preventDefault(),console.debug("Saving user cookie preferences from Form...");const n=document.getElementById(o["user-preference-configuration-form-id"]).querySelectorAll('input[type="radio"]:checked'),i={};for(var t=0;t<n.length;t++){const e=n.item(t),o=e.getAttribute("name"),r=e.getAttribute("value");console.log(`Processing Radio: ${o} = ${r})}`,t),i[e.getAttribute("name")]=e.getAttribute("value")}k(i),!1!==o["user-preference-saved-callback"]&&"function"==typeof o["user-preference-saved-callback"]&&o["user-preference-saved-callback"]()},k=function(e){!function(e){const n=o["user-preference-cookie-name"];let i=y("user-preference-cookie-secure"),t=365;w("user-preference-cookie-expiry-days")&&(t=o["user-preference-cookie-expiry-days"]);const r=new Date;r.setTime(r.getTime()+24*t*60*60*1e3);const c="expires="+r.toUTCString();let s=n+"="+encodeURIComponent(e)+";"+c+";path=/";i&&(s+=";secure"),document.cookie=s}(JSON.stringify(e)),console.debug("Saved user cookie preferences to cookie",c(o["user-preference-cookie-name"]))},m=function(e){null!==e&&e.addEventListener("click",function(e){!function(e){e.preventDefault(),console.debug("Saving user cookie preferences from Cookie Banner (accept all)...");const n={};for(var i=0;i<o["cookie-manifest"].length;i++){const e=o["cookie-manifest"][i];e.optional&&(n[e["category-name"]]="on")}k(n),!1!==o["cookie-banner-saved-callback"]&&"function"==typeof o["cookie-banner-saved-callback"]&&o["cookie-banner-saved-callback"]()}(e),i(),h()})},b=function(){if(!C("cookie-banner-id")&&!C("cookie-banner-visibility-class"))return void console.debug("Skipping binding to cookie banner as both cookie-banner-id and cookie-banner-visibility-class are not defined");if("loading"===document.readyState)return document.addEventListener("DOMContentLoaded",function(){b()}),void console.debug("DOM is not ready; adding event to bind to cookie banner when ready.");const e=document.getElementById(o["cookie-banner-id"]),n=document.querySelector('button[type="submit"]');null!==e&&(m(n),console.debug(`Found and bound to cookie banner with ID "${o["cookie-banner-id"]}".`),h())},h=function(){const e=document.getElementById(o["cookie-banner-id"]),n=o["cookie-banner-visibility-class"];if(null===e||null===n)return void console.error("Cannot work with cookie banner unless cookie-banner-id and cookie-banner-visibility-class are configured.");const i=document.getElementById(o["user-preference-configuration-form-id"]),r=o["cookie-banner-visible-on-page-with-preference-form"],c=o["user-preference-cookie-name"];t(c)?e.classList.contains(n)||(e.classList.add(n),console.debug("Cookie banner was set to visible.")):null!==i&&!1===r?e.classList.add(n):(e.classList.remove(n),console.debug("Cookie banner was set to visible."))},y=function(e){return o.hasOwnProperty(e)&&!0===o[e]},v=function(e){return!o.hasOwnProperty(e)||!1===o[e]},w=function(e){return o.hasOwnProperty(e)&&!isNaN(o[e])},C=function(e){return o.hasOwnProperty(e)&&"string"==typeof o[e]&&""!==o[e].trim()},T=function(e){return o.hasOwnProperty(e)&&"object"==typeof o[e]&&o[e].length>0};e.init=function(e){o=n;for(const n in e)o[n]=e[n];console.debug(o),i(),f(),b()}});
  </script>

  {{ gaHeadScript(analytics) }}
